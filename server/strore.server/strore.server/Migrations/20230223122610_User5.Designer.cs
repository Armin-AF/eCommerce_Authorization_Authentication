// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using strore.server.DataBase;

#nullable disable

namespace strore.server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230223122610_User5")]
    partial class User5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<string>");
                });

            modelBuilder.Entity("strore.server.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "d2a611f7-7496-4d4a-b1d1-f1d7ea566fdc",
                            Category = "category1",
                            Description = "product1 description",
                            ImageUrl = "https://picsum.photos/200/300",
                            Price = 10m,
                            Quantity = 10,
                            StoreId = "f6b6b6b6-6b6b-6b6b-6b6b-6b6b6b6b6b6b",
                            Title = "product1"
                        },
                        new
                        {
                            Id = "9133bf6b-e110-4ee7-8e3d-12622e716ea6",
                            Category = "category1",
                            Description = "product2 description",
                            ImageUrl = "https://picsum.photos/200/300",
                            Price = 20m,
                            Quantity = 20,
                            StoreId = "f7b7b7b7-7b7b-7b7b-7b7b-7b7b7b7b7b7b",
                            Title = "product2"
                        },
                        new
                        {
                            Id = "12cec80f-90e5-4c3c-adcd-f7716efa1487",
                            Category = "category1",
                            Description = "product3 description",
                            ImageUrl = "https://picsum.photos/200/300",
                            Price = 30m,
                            Quantity = 30,
                            StoreId = "f8b8b8b8-8b8b-8b8b-8b8b-8b8b8b8b8b8b",
                            Title = "product3"
                        });
                });

            modelBuilder.Entity("strore.server.Models.Store", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = "f6b6b6b6-6b6b-6b6b-6b6b-6b6b6b6b6b6b",
                            AdminId = "f5b5b5b5-5b5b-5b5b-5b5b-5b5b5b5b5b5b",
                            Name = "store1"
                        },
                        new
                        {
                            Id = "f7b7b7b7-7b7b-7b7b-7b7b-7b7b7b7b7b7b",
                            AdminId = "f5b5b5b5-5b5b-5b5b-5b5b-5b5b5b5b5b5b",
                            Name = "store2"
                        },
                        new
                        {
                            Id = "f8b8b8b8-8b8b-8b8b-8b8b-8b8b8b8b8b8b",
                            AdminId = "f5b5b5b5-5b5b-5b5b-5b5b-5b5b5b5b5b5b",
                            Name = "store3"
                        });
                });

            modelBuilder.Entity("strore.server.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "e7ea4ab1-daf2-41d9-b113-3712226715d2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62b3fd2c-080d-4904-8900-40d7e05a1f28",
                            Email = "user1@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Role = "user",
                            StoreId = "store1",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "ed643353-1dac-4ba2-acd2-09046bbd9df4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b894e580-77e4-4c83-a90f-8bb5a6fb070c",
                            Email = "user2@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Role = "user",
                            StoreId = "store2",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "f5b5b5b5-5b5b-5b5b-5b5b-5b5b5b5b5b5b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "776808f6-3f61-4866-ada1-0baf6da79280",
                            Email = "admin@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Role = "admin",
                            StoreId = "store1",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
