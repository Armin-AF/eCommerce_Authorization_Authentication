// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using strore.server.DataBase;

#nullable disable

namespace strore.server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230223121659_User2")]
    partial class User2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("strore.server.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "6ca9ab59-a639-4324-b859-4000dd2ae595",
                            Category = "category1",
                            Description = "product1 description",
                            ImageUrl = "https://picsum.photos/200/300",
                            Price = 10m,
                            Quantity = 10,
                            StoreId = "f6b6b6b6-6b6b-6b6b-6b6b-6b6b6b6b6b6b",
                            Title = "product1"
                        },
                        new
                        {
                            Id = "ae38ac8d-0e78-4515-8ebd-186045703dd3",
                            Category = "category1",
                            Description = "product2 description",
                            ImageUrl = "https://picsum.photos/200/300",
                            Price = 20m,
                            Quantity = 20,
                            StoreId = "f7b7b7b7-7b7b-7b7b-7b7b-7b7b7b7b7b7b",
                            Title = "product2"
                        },
                        new
                        {
                            Id = "4e82662a-b847-4caa-b3b8-fd10e599e792",
                            Category = "category1",
                            Description = "product3 description",
                            ImageUrl = "https://picsum.photos/200/300",
                            Price = 30m,
                            Quantity = 30,
                            StoreId = "f8b8b8b8-8b8b-8b8b-8b8b-8b8b8b8b8b8b",
                            Title = "product3"
                        });
                });

            modelBuilder.Entity("strore.server.Models.Store", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = "f6b6b6b6-6b6b-6b6b-6b6b-6b6b6b6b6b6b",
                            AdminId = "f5b5b5b5-5b5b-5b5b-5b5b-5b5b5b5b5b5b",
                            Name = "store1"
                        },
                        new
                        {
                            Id = "f7b7b7b7-7b7b-7b7b-7b7b-7b7b7b7b7b7b",
                            AdminId = "f5b5b5b5-5b5b-5b5b-5b5b-5b5b5b5b5b5b",
                            Name = "store2"
                        },
                        new
                        {
                            Id = "f8b8b8b8-8b8b-8b8b-8b8b-8b8b8b8b8b8b",
                            AdminId = "f5b5b5b5-5b5b-5b5b-5b5b-5b5b5b5b5b5b",
                            Name = "store3"
                        });
                });

            modelBuilder.Entity("strore.server.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "9f77d7be-850c-48e2-a5a0-06805ae82e2d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1df4007f-c456-4d1c-916d-a315ed71cf81",
                            Email = "user1@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Role = "user",
                            StoreId = "store1",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "a1f1aa6d-b856-4b02-993d-9d6782a24a5a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25008377-b468-495d-b156-e7bff20c1fa4",
                            Email = "user2@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Role = "user",
                            StoreId = "store2",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "f5b5b5b5-5b5b-5b5b-5b5b-5b5b5b5b5b5b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b8fe9cb-92c4-4040-beb4-3252c068af5a",
                            Email = "admin@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Role = "admin",
                            StoreId = "store1",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
